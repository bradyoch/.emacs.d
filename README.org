#+TITLE: Brady's Emacs Configuration
#+AUTHOR: Brady Ochse

* Introduction

This file uses org-mode to create a literate configuration for
Emacs. The idea behind literate files is to allow a mix of both text
and code. In a way, it flips the traditional code file structure and
focuses primarily on text with code mixed in. It allows the author of
the file to discuss the purpose and thought process behind the code in
a more natural way.

To that end, this file describes all the configuration and tweaks that
I have made to Emacs while using it.

* Literate Setup

As discussed in the introduction, this is a literate config, which
means that it mixes normal prose and code block that the prose
describes. Org mode makes this extremely easy to set up, but there are
a couple of setup items we'll want to establish to make our lives
easier.

The first is to define a global variable that identifies this
file. We'll use this in other functions to refer to this file.

#+begin_src emacs-lisp
  (defvar user-literate-config
    (expand-file-name "README.org" user-emacs-directory)
    "Location of the user's literate config file.")
#+end_src

Next we'll set up the code to 'tangle' this configuration. In the
language of literate configurations, 'tangling' means extracting the
code blocks and 'weaving' them together into the code files that are
actually run by emacs.

#+begin_src emacs-lisp
  (defun brady/tangle-config ()
    (interactive)
    (org-babel-tangle-file user-literate-config user-init-file))
#+end_src

Now we can call ~brady/tangle-config~ to update both init.el and
early-init.el with the modifications made to this file. However, we'd
like to be able to always make sure that Emacs is updated whenever we
restart. I've seen a couple ways of doing this; however, the way that
I'm using (for now at least) is to defer automatic updates to just
before shutting down. This ensures that everything is ready when I
startup Emacs again and I keep my startup scripts fast on boot.

There is one issue I've had with this where if I shut down the
computer with an active Emacs session, it may only partially tangle
the file before the process is killed. This isn't an issue too often
so I'm still happy with the solution, but it's worth noting.

To do this, we first write a function that runs ~brady/tangle-config~
only when my literate config file is newer than the init file. This
does assume that I will not edit my init file by hand, but we can
always run ~brady/tangle-config~ manually if needed.

#+begin_src emacs-lisp
  (defun brady/rebuild-config-maybe ()
    (interactive)
    (when (file-newer-than-file-p user-literate-config user-init-file)
      (brady/tangle-config)))
#+end_src

Then all we need to do is add the above function to the
~kill-emacs-hook~ which runs before emacs is shut down.

#+begin_src emacs-lisp
  (add-hook 'kill-emacs-hook #'brady/rebuild-config-maybe)
#+end_src

* Packaging

Although I try to minimize the amount of third-party packages that I
use in my Emacs configuration, there are a ton of extremely high
quality packages that are available. Emacs comes with package.el to
download and install packages from GNU ELPA. You can configure
package.el to pull from other repositories as well. However, for this
particular configuration, I will be using straight.el.

** Straight.el

Straight.el is a more functional alternative to package.el. Instead of
pulling the packages from a centralized package repoostory, it pulls
the packages from the version controlled repositories directly.

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
  (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
    (url-retrieve-synchronously
     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
     'silent 'inhibit-cookies)
  (goto-char (point-max))
  (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

Since straight.el replaces package.el, we need to include a snippet to
make sure that package.el is not loaded. This has to go in the
early-init.el file because otherwise package.el will be loaded before
init.el (where most other things in this file are exported to) can be
loaded.

#+begin_src emacs-lisp :tangle early-init.el
  (setq package-enable-at-startup 'nil)
#+end_src

** Use Package

use-package is an Emacs package that allows for more declarative and
contained configurations of other packages.

The first thing we need to do is install use-package. Fortunately,
straight.el makes that very easy.

#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src

* Emacs Defaults

There are a good number of Emacs settings that I prefer to
change. This section is largely miscellaneous configuration items that
don't have a better home yet, but they all pertain to changing some
default behavior that comes with Emacs.

** GUI Elements

Emacs ships with some GUI elements that are quite helpful for getting
new people comfortable with the editor, but I find to be unnecessary,
so I disable them!

Note that these changes are going into the early-init file because
changing the settings there prevents Emacs from flickering while
loading.

#+begin_src emacs-lisp :tangle early-init.el
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

Update the internal border for solely aesthetic reasons.

#+begin_src emacs-lisp :tangle early-init.el
  (add-to-list 'default-frame-alist '(internal-border-width . 12))
#+end_src

*** Fringe

Remove the background for the fringe and set it to only appear on the
left side of the window.

#+begin_src emacs-lisp
  (fringe-mode '(8 . 0))
  (set-face-attribute 'fringe nil :background nil)
#+end_src

** Fonts

Update the font settings. First we'll define the default font to be
used as well as the font size.

#+begin_src emacs-lisp :tangle early-init.el
  (add-to-list 'default-frame-alist '(font . "Source Code Pro-10"))
#+end_src

*** Emoji Support
:PROPERTIES:
:header-args: :tangle no
:END:

Use this snippet from Xah Lee (found [[http://ergoemacs.org/emacs/emacs_list_and_set_font.html][here]]) to enable Emoji support in
Emacs.

#+begin_src emacs-lisp
  ;; set font for emoji
  (set-fontset-font
   t
   '(#x1f300 . #x1fad0)
   (cond
    ((member "Noto Color Emoji" (font-family-list)) "Noto Color Emoji")
    ((member "Noto Emoji" (font-family-list)) "Noto Emoji")
    ((member "Segoe UI Emoji" (font-family-list)) "Segoe UI Emoji")
    ((member "Symbola" (font-family-list)) "Symbola")
    ((member "Apple Color Emoji" (font-family-list)) "Apple Color Emoji"))
   ;; Apple Color Emoji should be before Symbola, but Richard Stallman disabled it.
   ;; GNU Emacs Removes Color Emoji Support on the Mac
   ;; http://ergoemacs.org/misc/emacs_macos_emoji.html
   ;;
   )
#+end_src

** Autosaving and Backups

Autosaving and backups are nice features, but I prefer to have them
off.

#+begin_src emacs-lisp
  (setq auto-save-default 'nil
        make-backup-files 'nil
        create-lockfiles 'nil)
#+end_src

** Formatting

This section changes the formatting settings for Emacs as well as
adding some additional functionality.

*** Whitespace

Although I philosophically think that tabs are the correct indentation
unit, spaces seem to be becoming the standard for most things (that I
at least work on) so lets make them the standard in Emacs as well.

#+begin_src emacs-lisp
  (setq-default tab-width 2
                indent-tabs-mode 'nil)
#+end_src

Another really nice function of most editors nowadays is the ability
to cleanup whitespace after a line as well as empty lines at the end
of the file. We can make some quick tweaks to make that available in
Emacs as well.

#+begin_src emacs-lisp
  (setq-default delete-trailing-lines 't
    require-final-newline 't)
#+end_src

#+begin_src emacs-lisp
  (defun brady/cleanup-whitespace-in-buffer ()
    "Cleanup whitespace in the current buffer"
    (interactive)
    (when (derived-mode-p 'prog-mode 'text-mode)
      (delete-trailing-whitespace)))

  (add-hook 'before-save-hook #'brady/cleanup-whitespace-in-buffer)
#+end_src

** Custom

Custom is a system for configuring packages and settings using a
GUI. I think custom is a good idea, but I don't like that it clutters
my init.el file with variables that I didn't set. We'll use custom to
set custom to use a different file.

#+begin_src emacs-lisp
  (use-package custom
    :config
    (when (file-exists-p custom-file)
      (load-file custom-file))
    :custom
    (custom-file (expand-file-name "custom.el" user-emacs-directory)))
#+end_src

** Bell

Prevent all types of bell ringing on error.

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Scrolling

Tweaks to make Emacs scrolling work a little better.

#+begin_src emacs-lisp
  (setq scroll-conservatively 1000)
#+end_src

Update scroll margin to leave some buffer at the bottom of the page
when scrolling.

#+begin_src emacs-lisp
  (setq scroll-margin 4)
#+end_src

Change the scroll speed with a mouse such that it's a little easier to
control with a touchpad.

#+begin_src emacs-lisp
  (setq mouse-wheel-scroll-amount
        '(2 ((shift) . 1) ((meta)) ((control) . text-scale))
        mouse-wheel-progressive-speed 'nil)
#+end_src

** Memory thresholds

Increase the maximum garbage collection threshold to prevent the UI
from blocking as often. Also increate the maximum read-process-output
to allow for language servers to function better.

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1024 1024)
        read-process-output-max (* 1024 1024))
#+end_src

** Startup

When Emacs starts up, it displays a useful page about how to get
started with it. I prefer to skip that and go directly to a scratch
buffer.

#+begin_src emacs-lisp
  (setq inhibit-startup-screen 't
        initial-scratch-message "")
#+end_src

** Util Functions

This section contains some basic functions for handling the built in
functionality for Emacs.

#+begin_src emacs-lisp
  (defun brady/set-readable ()
    (interactive)
    (if (car (window-margins))
        (progn
          (set-window-margins 'nil 0 0)
          (visual-line-mode 0)
          (text-scale-set 0))
      (let* ((width (window-width))
             (margin (floor (/ width 3.5))))
        (set-window-margins 'nil margin margin)
        (visual-line-mode 1)
        (text-scale-set 1))))
#+end_src

** Misc

A section for other tweaks that aren't large enough for their own
discussion.

*** Completion

Emacs has pretty good completion built-in. I have used company in the
past for a more modern completion framework, but I'm trying the
defaults for now.

#+begin_src emacs-lisp
  (setq tab-always-indent t
        completion-styles '(basic initials partial-completion substring))
#+end_src

*** Yes/No Prompts

Emacs has two yes/no prompts by default. It has one that requires you
to type "yes" or "no" and one that only requires you to type "y" or
"n". This sets the "yes/no" prompt to be the same function as the
"y/n" prompt.

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

* Packages

This section contains packages that are not associated with a single
programming language. For programming language specific packages, see
the Languages section of this config.

** [DISABLED] Modus Vivendi
:PROPERTIES:
:header-args: :tangle no
:END:

Modus vivendi is the dark mode version of the modus themes.

#+begin_src emacs-lisp
  (use-package modus-vivendi-theme
    :straight t
    :init (load-theme 'modus-vivendi 't))
#+end_src

** Magit

Magit is a fantastic interface to all things git.

#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :bind ("C-x g" . magit))
#+end_src

** Avy Jump

Avy jump allows me to jump to any place in my open frame with a couple
key presses. It's a really cool package that makes navigating the
Emacs interface much easier.

#+begin_src emacs-lisp
  (use-package avy
    :straight t
    :bind ("M-SPC" . avy-goto-word-or-subword-1))
#+end_src

** Which Key

Which Key will show the next available key whenever a partial key
sequence is used. It is very useful for discovering and remembering
key bindings.

#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :init (which-key-mode 1)
    :config
    (setq which-key-idle-delay 0.1))
#+end_src

** [DISABLED] LSP Mode
:PROPERTIES:
:header-args: :tangle no
:END:

Testing LSP mode for language server integration.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :init (setq lsp-keymap-prefix "C-c l")
    :hook ((lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui
    :after lsp-mode
    :commands lsp-mode-ui)
#+end_src

** Eglot

Eglot is a language server client that tries to integrate with the
built-in functionality of Emacs. lsp-mode generally has slightly more
features, but I've been happy with Eglot.

First, I'll set up some functions to run on various hooks. The first
hook sets up auto-formatting for buffers that are managed by Eglot. I
have this disabled for the time being because I need to find a more
efficient way to handle this sort of thing.

#+begin_src emacs-lisp
  (defun brady/eglot--format-pre-save ()
    "Function to run auto-formatting before save"
    (ignore-errors
      (eglot-code-action-organize-imports (point-min) (point-max)))
    (eglot-format-buffer))

  (defun brady/eglot--setup-auto-format ()
    "Setup auto format for buffers managed by eglot"
    (if (eglot-managed-p)
        (add-hook 'before-save-hook #'brady/eglot--format-pre-save 10 't)
      (remove-hook 'before-save-hook #'brady/eglot--format-pre-save 't)))
#+end_src

Now we can configure the package itself.

#+begin_src emacs-lisp
  (use-package eglot
      :straight t
      :config
      (setq eglot-confirm-server-initiated-edits 'nil))
      ;; (add-hook 'eglot-managed-mode-hook #'brady/eglot--setup-auto-format))
#+end_src

** Company

I mostly like the default Emacs completion that requires explicit
action to see the completions; however, I've been evaluating company
mode.

#+begin_src emacs-lisp
  (use-package company
    :straight t
    :hook (emacs-startup . global-company-mode)
    :config (setq company-backends '(company-capf company-files)))
#+end_src

** Highlight Line

hl-line is a package that is built in to Emacs the simply highlights
the line that the cursor is currently on.

#+begin_src emacs-lisp
  (use-package hl-line
    :init (global-hl-line-mode 1))
#+end_src

** Display Line Numbers

display-line-numbers is a package that is built in to Emacs that
displays the line numbers to the side of the buffer. I prefer to only
have it enabled for programming buffers.

#+begin_src emacs-lisp
  (use-package display-line-numbers
    :hook (prog-mode . display-line-numbers-mode))
#+end_src

** VTerm

There are a number of great shells in Emacs. Eshell is personally my
favorite of them, but sometimes you need to run a program that doesn't
behave well with any of the built-in shells and you need a full
shell. VTerm is that for Emacs.

#+begin_src emacs-lisp
  (use-package vterm
    :straight t
    :bind (("C-`" . vterm-other-window)))
#+end_src

** [DISABLED] Tree Sitter
:PROPERTIES:
:header-args: :tangle no
:END:

Better syntax highlighting with tree sitter grammars.

#+begin_src emacs-lisp :tangle no
  (use-package tree-sitter
    :straight t)

  (use-package tree-sitter-langs
    :straight t)
#+end_src

** MPV.el

MPV is a fantastic open source media player. I often use it to watch
streams, videos, and other media through it's youtube-dl
integration. This package makes it possible to interact with MPV
through Emacs.

#+begin_src emacs-lisp
  (use-package mpv
    :straight t)
#+end_src

Add a function to play a playlist with the option to select a start
index. Eventually, I'd like to set up some persistence for
this. (Maybe integrating with MPPD.)

#+begin_src emacs-lisp
  (defun mpv-play-playlist (path index)
    "Play a playlist with an optional offset"
    (interactive "sPath: \nnIndex: ")
    (let ((playlist-start (if index (number-to-string index) "0")))
      (mpv-start path (concat "--playlist-start=" playlist-start))))

  (defun mpv-playlist-at-point ()
    "Play the playlist described by the current org node"
    (interactive)
    (let ((url (car (org-property-values "url")))
          (index (string-to-number (car (org-property-values "current-index")))))
      (mpv-play-playlist url index)))
#+end_src

** [DISABLED] Evil Mode
:PROPERTIES:
:header-args: :tangle no
:END:

Evil mode brings vim keybindings to Emacs. I'm not sure whether I want
that or not, but I'm quite comfortable with vim keybindings, so I'm
giving it a shot for now.

#+begin_src emacs-lisp
  (use-package evil
    :straight t
    :config
    (evil-mode 1))
#+end_src

** Expand Region

Expand region is a wonderful mod that allows you to progressively
expand the selected region.

#+begin_src emacs-lisp
  (use-package expand-region
    :straight t
    :bind (("C-=" . er/expand-region)))
#+end_src

** TRAMP

TRAMP is a built-in Emacs package which allows (T)ransparent (R)emote
(A)ccess to other servers and computers through my local Emacs
instance.

#+begin_src emacs-lisp
  (use-package tramp
    :config
    (setq tramp-copy-size-limit 'nil))
#+end_src

** [DISABLED] Ivy
:PROPERTIES:
:header-args: :tangle no
:END:

Ivy is a completion package for Emacs. Originally, it was developed as
a lighter-weight alternative to HELM, but now it's quite
featureful. I'm evaluating it compared to the default behavior.

#+begin_src emacs-lisp
  (use-package ivy
    :straight t
    :hook (emacs-startup . ivy-mode)
    :config
    (setq ivy-use-virtual-buffers 't
          enable-recursive-minibuffers 't))
#+end_src

** [DISABLED] Swiper
:PROPERTIES:
:header-args: :tangle no
:END:

Swiper is a package which allows for more pleasant and featureful
searching. Since it comes as a requirement for Ivy, I enable it as
well.

#+begin_src emacs-lisp
  (use-package swiper
    :straight t
    :bind (("C-s" . swiper)))
#+end_src

* Languages

This section contains all the configuration for programming languages
that I use in Emacs.

** Python

Use the built-in python functionality and add pyvenv mode for working
with virtual environments.

#+begin_src emacs-lisp
  (use-package python
    :straight t)
#+end_src

#+begin_src emacs-lisp
  (use-package pyvenv
    :straight t)
#+end_src

** Javascript/Typescript

The javascript support in Emacs is pretty good. However, we do need to
install the typescript-mode package to make Emacs work with typescript
files. I choose not to use the tide package which integrates with the
typescript language server. Instead, I simply use eglot and the
typescript-language-server which I find to be slightly more standard.

#+begin_src emacs-lisp
  (use-package typescript-mode
    :straight t
    :config
    (setq-default typescript-indent-level 2))

  (use-package js
    :config
    (setq-default js-indent-level 2))
#+end_src

** HTML/CSS

I haven't found a need for web-mode yet, but I want to mention it in
case I determine I have a need for it in the future. However, I do
want to customize some CSS to make indent levels consistent.

#+begin_src emacs-lisp
  (use-package css-mode
    :config
    (setq-default css-indent-offset 2))
#+end_src

** Markdown Mode

Although I use org mode for most of my personal configuration, I use
markdown often for collaborative projects.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t)
#+end_src

** Rust Mode

Some settings for the rust programming language.

#+begin_src emacs-lisp
  (use-package rust-mode
    :straight t
    :config
    ;; (add-hook 'rust-mode-hook #'tree-sitter-hl-mode)

    (defun brady/rust-set-indentation ()
      "Set tab width for rust mode buffers"
      (setq tab-width 4))
    (add-hook 'rust-mode-hook #'brady/rust-set-indentation)
    (add-hook 'rust-mode-hook #'rust-enable-format-on-save))
#+end_src

** Go Mode

Some settings for the go programming language.

#+begin_src emacs-lisp
  (use-package go-mode
    :straight t)
#+end_src

** JSON Mode

JSON mode provides better support for actual JSON documents than the
default js-mode and allows for tree-sitter highlighting to be applied.

#+begin_src emacs-lisp
  (use-package json-mode
    :straight t)
    ;; :config
    ;; (add-hook 'json-mode-hook #'tree-sitter-hl-mode))
#+end_src

** YAML Mode

YAML is commonly used for configuration files, so it's important to
have a mode for it.

#+begin_src emacs-lisp
  (use-package yaml-mode
    :straight t)
#+end_src

* Integrations

This section contains integrations with my environment and/or other
external programs.

** SSH

I use ssh heavily for work, including using dynamic port forwarding to
access the domain network, this is a helper function to start that
process in the background.

#+begin_src emacs-lisp
  (defun brady/ssh-dynamic-forward (host port)
    "Start SSH dynamic port forwarding on the given port"
    (interactive "sHost: \nnPort: ")
    (start-process "SSH Dynamic Forward"
                   'nil
                   "ssh" "-NfD" (number-to-string port) host))
#+end_src

* Keybindings

This section contains all keybindings that are unrelated to a specific
major mode.

Firstly, we disable C-z to prevent the GUI from suspending. I
typically don't want to do this, and if I did, I would use the window
manager to do it.

#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
#+end_src

* Org Mode

Org mode is a life manager centered around a markup language that this
file is written in!

#+begin_src emacs-lisp
  (use-package org
    :straight t
    :config
    (add-to-list 'org-structure-template-alist
                 '("el" . "src emacs-lisp"))
    (add-hook 'org-mode-hook #'auto-fill-mode)
    :custom
    (org-adapt-indentation 'nil "Don't indent text to match headings"))

  (use-package org-tempo
    :after org)
#+end_src
